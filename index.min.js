angular.module('transformators', []);

angular.module('dependencies', ['ui.router']);

angular.module('app', ['dependencies', 'transformators']);

angular.module('app').config(function($stateProvider, $urlRouterProvider) {
  $urlRouterProvider.otherwise('/');
  return $stateProvider.state('transformatorCounter', {
    url: '/',
    templateUrl: 'views/transformatorCounter/transformatorCounter.html',
    controller: 'TransformatorCounterController'
  }).state('transformatorReview', {
    url: '/review',
    templateUrl: 'views/transformatorCounter/transformatorReview.html',
    controller: 'TransformatorReviewController'
  }).state('linkMatrix', {
    url: '/link_matrix',
    templateUrl: 'views/linkMatrix/linkMatrix.html',
    controller: 'LinkMatrixController'
  });
});

angular.module('transformators').service('settings', function() {
  var settings;
  settings = {
    loops: 10,
    successResults: 1,
    includeBuildCost: true
  };
  this.getSettings = function() {
    return settings;
  };
  return this;
});

var TransformatorCounterController;

TransformatorCounterController = function($scope, $state, Transformators, TransformatorSources, settings) {
  var validateTargets;
  $scope.targets = Transformators.getTargets();
  $scope.source = Transformators.getSource();
  $scope.settings = settings.getSettings();
  $scope.addTarget = function() {
    return $scope.targets.push({
      label: "ТП" + ($scope.targets.length + 1),
      r: 15,
      km: _.random(1.6, 1.9, true),
      t: 8760,
      time: 8760,
      cos: 0.8,
      transformatorsCount: 1,
      u: 10
    });
  };
  validateTargets = function() {
    var isError;
    isError = !_.every($scope.targets, function(target) {
      var t;
      t = target;
      return t.power && (t.x != null) && (t.y != null) && t.transformatorsCount && t.cos && t.time && t.u;
    });
    isError = isError || !(($scope.source.x != null) && ($scope.source.y != null)) || !($scope.settings.loops && $scope.settings.successResults);
    if (isError) {
      return 'Есть незаполненные поля';
    }
    isError = $scope.settings.successResults > $scope.settings.loops;
    if (isError) {
      return 'К-во лучших результатов не может быть больше к-ва циклов.';
    }
    isError = Transformators.countTotalPower($scope.targets) > Transformators.maxPower;
    if (isError) {
      return "Мощность потребителей превышает максимальную (" + Transformators.maxPower + " кВА)";
    }
    isError = _.some($scope.targets, function(target) {
      return target.power > Transformators.maxPower / 2;
    });
    if (isError) {
      return "Мощность одного из потребителей превышает максимальную (" + (Transformators.maxPower / 2) + " кВА)";
    }
  };
  $scope.generateLinkMatrix = function() {
    var error;
    if (error = validateTargets()) {
      Materialize.toast(error, 4000);
      return;
    }
    Transformators.setTargets($scope.targets);
    return $state.go('linkMatrix');
  };
  $scope.findTransformators = function() {
    var error;
    error = validateTargets();
    if (error) {
      Materialize.toast(error, 4000);
      return;
    }
    TransformatorSources.findTransformatorSources($scope.targets);
    return $state.go('transformatorReview');
  };
  $scope.removeTarget = function(index) {
    return $scope.targets.splice(index, 1);
  };
  return $scope.draw = function() {
    var bubbleCart, container, error;
    if (error = validateTargets()) {
      Materialize.toast(error, 4000);
      return;
    }
    container = document.getElementById('data-set');
    return bubbleCart = new Chart(container, {
      type: 'bubble',
      data: {
        datasets: [
          {
            label: 'ИП',
            data: [$scope.source],
            backgroundColor: 'yellow',
            hoverBackgroundColor: 'yellow'
          }, {
            label: 'ТП',
            data: $scope.targets,
            backgroundColor: '#FF6384',
            hoverBackgroundColor: '#FF6384'
          }
        ]
      },
      options: {
        title: {
          display: true,
          text: 'Карта-схема расположения потребителей'
        },
        tooltips: {
          callbacks: {
            title: function(item, datasets) {
              item = item[0];
              return datasets.datasets[item.datasetIndex].data[item.index].label;
            },
            label: function(tooltipItem, data) {
              return "(x: " + tooltipItem.xLabel + "; y: " + tooltipItem.yLabel + ")";
            }
          }
        }
      }
    });
  };
};

angular.module('transformators').controller('TransformatorCounterController', TransformatorCounterController);

var TransformatorReviewController;

TransformatorReviewController = function($scope, $state, TransformatorSources) {
  $scope.sources = TransformatorSources.getTransformatorSources();
  if (!$scope.sources.data) {
    $state.go('transformatorCounter');
  }
  return $scope.findTransformators = function() {
    var transformators;
    transformators = $scope.sources.data;
    return TransformatorSources.findTransformatorSources([].concat(transformators.first.targets, transformators.second.targets));
  };
};

angular.module('transformators').controller('TransformatorReviewController', TransformatorReviewController);

angular.module('transformators').factory('TransformatorSources', function(Transformators) {
  var findTransformatorSources, getTransformatorSources, initTransformatorSources, sources;
  sources = {
    data: null
  };
  initTransformatorSources = function() {
    return sources.data = {
      first: {
        targets: [],
        transformator: null
      },
      second: {
        targets: [],
        transformator: null
      }
    };
  };
  getTransformatorSources = function() {
    return sources;
  };
  findTransformatorSources = function(targets) {
    var isBalanced, isPowered, qTotalPower, results, totalPower, transformators;
    initTransformatorSources();
    totalPower = Transformators.countTotalPower(targets);
    transformators = sources.data;
    results = [];
    while (true) {
      while (true) {
        transformators.first.transformator = Transformators.findTransformator();
        transformators.second.transformator = Transformators.findTransformator();
        isPowered = transformators.first.transformator.power + transformators.second.transformator.power > totalPower;
        qTotalPower = Transformators.countQuarterTotalPower(totalPower);
        isBalanced = transformators.first.transformator.power > qTotalPower && transformators.second.transformator.power > qTotalPower;
        if (isPowered && isBalanced) {
          break;
        }
      }
      _.each(targets, function(target) {
        if (_.random(0, 1, true) < 0.5 && Transformators.countTotalPower(transformators.first.targets) + target.power < transformators.first.transformator.power) {
          return transformators.first.targets.push(target);
        } else {
          return transformators.second.targets.push(target);
        }
      });
      if (transformators.first.transformator.power > Transformators.countTotalPower(transformators.first.targets && transformators.second.transformator.power > Transformators.countTotalPower(transformators.second.targets))) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  return {
    getTransformatorSources: getTransformatorSources,
    findTransformatorSources: findTransformatorSources
  };
});

angular.module('transformators').factory('Transformators', function() {
  var countQuarterTotalPower, countTotalPower, findTransformator, getJ, getLine, getLineBuildCost, getLineCost, getLineResistance, getSource, getTargets, lineBuildCost, lineCostList, lineResistances, linesList, maxPower, setTargets, source, targets, transformatorList, transformatorTargetList;
  maxPower = 15000;
  targets = [];
  source = {
    label: 'Источник Питания',
    linksLength: [],
    x: null,
    y: null,
    r: 30
  };
  transformatorTargetList = [
    {
      name: 'ТМ-25/10',
      snt: 25,
      px: 0.135,
      pk: 0.6,
      ix: 3.2,
      uk: 4.5
    }, {
      name: 'ТМ-40/10',
      snt: 40,
      px: 0.19,
      pk: 0.88,
      ix: 3,
      uk: 4.5
    }, {
      name: 'ТМ-63/10',
      snt: 63,
      px: 0.265,
      pk: 0.128,
      ix: 2.8,
      uk: 4.5
    }, {
      name: 'ТМ-100/10',
      snt: 100,
      px: 0.365,
      pk: 1.97,
      ix: 2.6,
      uk: 4.5
    }, {
      name: 'ТМ-160/10',
      snt: 160,
      px: 0.565,
      pk: 2.65,
      ix: 2.4,
      uk: 4.5
    }, {
      name: 'ТМ-250/10',
      snt: 250,
      px: 0.82,
      pk: 3.7,
      ix: 2.3,
      uk: 4.5
    }, {
      name: 'ТМ-400/10',
      snt: 400,
      px: 1.05,
      pk: 5.5,
      ix: 2.1,
      uk: 4.5
    }, {
      name: 'ТМ-630/10',
      snt: 630,
      px: 1.56,
      pk: 7.6,
      ix: 2,
      uk: 5.5
    }, {
      name: 'ТМ-1000/10',
      snt: 1000,
      px: 2.45,
      pk: 12.2,
      ix: 1.4,
      uk: 5.5
    }, {
      name: 'ТМ-1600/10',
      snt: 1600,
      px: 3.3,
      pk: 18,
      ix: 1.3,
      uk: 5.5
    }, {
      name: 'ТМ-2500/10',
      snt: 2500,
      px: 4.6,
      pk: 25,
      ix: 1,
      uk: 5.5
    }, {
      name: 'ТМ-4000/10',
      snt: 4000,
      px: 6.4,
      pk: 33.5,
      ix: 0.9,
      uk: 5.5
    }, {
      name: 'ТМ-6300/10',
      snt: 6300,
      px: 9,
      pk: 46.5,
      ix: 0.8,
      uk: 6.5
    }, {
      name: 'ТСЗ-160/10',
      snt: 160
    }, {
      name: 'ТСЗ-250/10',
      snt: 250
    }, {
      name: 'ТСЗ-400/10',
      snt: 400
    }, {
      name: 'ТСЗ-630/10',
      snt: 630
    }, {
      name: 'ТСЗ-1000/10',
      snt: 1000
    }, {
      name: 'ТСЗ-1600/10',
      snt: 1600
    }
  ];
  transformatorList = [
    {
      type: 'TM-10/10',
      power: 10
    }, {
      type: 'TM-20/10',
      power: 20
    }, {
      type: 'TM-25/10',
      power: 25
    }, {
      type: 'TM-30/10',
      power: 30
    }, {
      type: 'TM-40/10',
      power: 40
    }, {
      type: 'TM-50/10',
      power: 50
    }, {
      type: 'TM-63/10',
      power: 63
    }, {
      type: 'TM-100/10',
      power: 100
    }, {
      type: 'TM-160/10',
      power: 160
    }, {
      type: 'TM-180/10',
      power: 180
    }, {
      type: 'TM-250/10',
      power: 250
    }, {
      type: 'TM-320/10',
      power: 320
    }, {
      type: 'TM-400/10',
      power: 400
    }, {
      type: 'TM-560/10',
      power: 560
    }, {
      type: 'TM-630/10',
      power: 630
    }, {
      type: 'TM-750/10',
      power: 750
    }, {
      type: 'TM-1000/10',
      power: 1000
    }, {
      type: 'TM-1600/10',
      power: 1600
    }, {
      type: 'TM-1800/10',
      power: 1800
    }, {
      type: 'TM-3200/10',
      power: 3200
    }, {
      type: 'TM-5600/10',
      power: 5600
    }, {
      type: 'TM-6300/10',
      power: 6300
    }, {
      type: 'TM-7500/10',
      power: 7500
    }
  ];
  linesList = [
    {
      cut: 16,
      i: 75
    }, {
      cut: 25,
      i: 90
    }, {
      cut: 35,
      i: 115
    }, {
      cut: 50,
      i: 140
    }, {
      cut: 70,
      i: 165
    }, {
      cut: 95,
      i: 205
    }, {
      cut: 120,
      i: 240
    }, {
      cut: 150,
      i: 275
    }, {
      cut: 185,
      i: 310
    }, {
      cut: 240,
      i: 355
    }
  ];
  lineCostList = [
    {
      section: 16,
      type: 0,
      price: 2.36
    }, {
      section: 25,
      type: 0,
      price: 2.54
    }, {
      section: 35,
      type: 0,
      price: 2.77
    }, {
      section: 50,
      type: 0,
      price: 3.07
    }, {
      section: 70,
      type: 0,
      price: 3.49
    }, {
      section: 95,
      type: 0,
      price: 4.01
    }, {
      section: 120,
      type: 0,
      price: 4.11
    }, {
      section: 150,
      type: 0,
      price: 5.21
    }, {
      section: 185,
      type: 0,
      price: 5.9
    }, {
      section: 240,
      type: 0,
      price: 7.09
    }, {
      section: 16,
      type: 1,
      price: 1.61
    }, {
      section: 25,
      type: 1,
      price: 1.76
    }, {
      section: 35,
      type: 1,
      price: 1.88
    }, {
      section: 50,
      type: 1,
      price: 2.11
    }, {
      section: 70,
      type: 1,
      price: 7.38
    }, {
      section: 95,
      type: 1,
      price: 2.76
    }, {
      section: 120,
      type: 1,
      price: 3.0
    }, {
      section: 150,
      type: 1,
      price: 3.5
    }, {
      section: 185,
      type: 1,
      price: 4.01
    }, {
      section: 240,
      type: 1,
      price: 4.8
    }
  ];
  lineBuildCost = [
    {
      count: 1,
      price: 1.12
    }, {
      count: 2,
      price: 1.58
    }, {
      count: 3,
      price: 2.06
    }, {
      count: 4,
      price: 2.54
    }, {
      count: 5,
      price: 3.05
    }, {
      count: 6,
      price: 3.53
    }, {
      count: 7,
      price: 4.12
    }, {
      count: 8,
      price: 4.72
    }, {
      count: 9,
      price: 5.36
    }, {
      count: 10,
      price: 5.91
    }
  ];
  lineResistances = [
    {
      section: 16,
      resistance: 1.94
    }, {
      section: 25,
      resistance: 1.24
    }, {
      section: 35,
      resistance: 0.89
    }, {
      section: 50,
      resistance: 0.62
    }, {
      section: 70,
      resistance: 0.443
    }, {
      section: 95,
      resistance: 0.326
    }, {
      section: 120,
      resistance: 0.258
    }, {
      section: 150,
      resistance: 0.206
    }, {
      section: 185,
      resistance: 0.167
    }, {
      section: 240,
      resistance: 0.129
    }
  ];
  getTargets = function() {
    return targets;
  };
  getSource = function() {
    return source;
  };
  setTargets = function(_targets) {
    _.each(_targets, function(target, index) {
      var qk, qx, tg;
      target.id = index;
      target.links = _.map(_targets, function() {
        return 'unblocked';
      });
      target.linksLength = [];
      target.links[index] = 'blocked';
      tg = Math.sqrt(1 - Math.pow(target.cos, 2)) / target.cos;
      target.qp = target.power * tg;
      target.sp = Math.sqrt(Math.pow(target.power, 2) + Math.pow(target.qp, 2));
      target.sn = _.find(transformatorTargetList, function(tr) {
        return tr.snt >= target.sp / target.transformatorsCount;
      });
      target.kn = target.sp / (target.transformatorsCount * target.sn.snt);
      qx = target.sn.ix * target.sn.snt / 100;
      qk = target.sn.uk * target.sn.snt / 100;
      if (target.transformatorsCount - 1) {
        target.ka = target.sp / target.sn.snt;
        target.pt = 2 * target.sn.px + 0.5 * target.sn.pk * Math.pow(target.sp / target.sn.snt, 2);
        target.qt = 2 * qx + 0.5 * qk * Math.pow(target.sp / target.sn.snt, 2);
      } else {
        target.ka = 0;
        target.pt = target.sn.px + target.sn.pk * Math.pow(target.sp / target.sn.snt, 2);
        target.qt = qx + qk * Math.pow(target.sp / target.sn.snt, 2);
      }
      target.pph = target.power + target.pt;
      target.cpPower = target.pph / target.km;
      target.w = target.cpPower * target.t;
      target.qph = target.qp + target.qt;
      return target.sph = Math.sqrt(Math.pow(target.pph, 2) + Math.pow(target.qph, 2));
    });
    _.each(_targets, function(target) {
      var length;
      length = Math.sqrt(Math.pow(source.x - target.x, 2) + Math.pow(source.y - target.y, 2));
      source.linksLength[target.id] = +length.toFixed(2);
      return _.each(_targets, function(_target) {
        length = Math.sqrt(Math.pow(_target.x - target.x, 2) + Math.pow(_target.y - target.y, 2));
        return target.linksLength[_target.id] = +length.toFixed(2);
      });
    });
    return targets = _targets;
  };
  findTransformator = function() {
    var transformatorIndex;
    transformatorIndex = _.round(transformatorList.length * _.random(0, 1, true));
    if (transformatorIndex === transformatorList.length) {
      transformatorIndex -= 1;
    }
    return transformatorList[transformatorIndex];
  };
  countTotalPower = function(targets) {
    return _.sumBy(targets, 'power');
  };
  countQuarterTotalPower = function(totalPower) {
    return totalPower * 0.25;
  };
  getJ = function(u, t) {
    if (t < 3000) {
      return 1.6;
    } else if (t >= 3000 && t < 5000) {
      return 1.4;
    } else {
      return 1.2;
    }
  };
  getLine = function(f, i) {
    var count, line;
    count = Math.ceil(f / 240);
    f /= count;
    line = _.find(linesList, function(line) {
      return line.cut > f && line.i * count > i;
    });
    if (!line) {
      count = Math.ceil(i / 355);
      i /= count;
      line = _.find(linesList, function(line) {
        return line.i > i;
      });
    }
    line = $.extend(true, {}, line);
    line.count = count;
    line.type = _.random(0, 1);
    return line;
  };
  getLineCost = function(line) {
    return _.find(lineCostList, function(lineCost) {
      return lineCost.type === line.type && lineCost.section === line.cut;
    });
  };
  getLineBuildCost = function(line) {
    return _.find(lineBuildCost, function(lineCost) {
      return lineCost.count === line.count;
    });
  };
  getLineResistance = function(line) {
    return _.find(lineResistances, function(lineResistance) {
      return lineResistance.section === line.cut;
    });
  };
  return {
    getTargets: getTargets,
    setTargets: setTargets,
    getSource: getSource,
    findTransformator: findTransformator,
    countTotalPower: countTotalPower,
    countQuarterTotalPower: countQuarterTotalPower,
    maxPower: maxPower,
    getJ: getJ,
    getLine: getLine,
    getLineCost: getLineCost,
    getLineBuildCost: getLineBuildCost,
    getLineResistance: getLineResistance
  };
});

angular.module('transformators').filter('cost', function() {
  return function(input) {
    return input * 80 / 2;
  };
});

var LinkMatrixController;

LinkMatrixController = function($scope, $state, Schemas, Transformators, Graph, settings) {
  var drawGraph, linkTargets, saveResult;
  $scope.targets = Transformators.getTargets();
  $scope.settings = settings.getSettings();
  Transformators.setTargets($scope.targets);
  $scope.source = Transformators.getSource();
  $scope.visibleResult = null;
  if (!$scope.targets.length) {
    $state.go('transformatorCounter');
  }
  $scope.changeLink = function(from, to, value) {
    return $scope.targets[from].links[to] = $scope.targets[to].links[from] = value;
  };
  $scope.changeLinkLength = function(from, to, value) {
    return $scope.targets[from].linksLength[to] = $scope.targets[to].linksLength[from] = value;
  };
  linkTargets = function(targets) {
    var graph, id, isInvalid, links, sourceLinks, targetLinks;
    isInvalid = true;
    while (isInvalid) {
      targetLinks = {};
      graph = Graph.initGraph(targets.length + 1);
      _.each(targets, function(target) {
        return targetLinks[target.id] = [];
      });
      _.each(targets, function(target) {
        var availableLinks, link, to;
        targetLinks[target.id] = [];
        availableLinks = [];
        _.each(target.links, function(link, index) {
          if (link === 'unblocked') {
            return availableLinks.push(index);
          }
        });
        if (availableLinks.length) {
          to = _.round(availableLinks.length * _.random(0, 1, true));
          if (to === availableLinks.length) {
            to -= 1;
          }
          to = availableLinks[to];
          link = _.find(Graph.getGraph().links, function(link) {
            return (link.from === target.id && link.to === to) || (link.from === to && link.to === target.id);
          });
          if (!link) {
            Graph.addLink(target.id, to);
            targetLinks[target.id].push(to);
            targetLinks[to].push(target.id);
          }
          if (_.random(0, 1, true) > 0.5) {
            return Graph.addLink(targets.length, target.id);
          }
        } else {
          return Graph.addLink($scope.targets.length, target.id);
        }
      });
      sourceLinks = _.map(_.filter(Graph.getGraph().links, function(link) {
        return link.from === targets.length;
      }), 'to');
      isInvalid = false;
      for (id in targetLinks) {
        links = targetLinks[id];
        if (links.length && !_.intersection(sourceLinks, _.flatten([links, +id])).length) {
          isInvalid = true;
          break;
        }
      }
      if (!isInvalid) {
        isInvalid = Graph.isCyclic();
      }
    }
    return Graph.getGraph().links;
  };
  saveResult = function(links, fullLinks, cost) {
    if ($scope.topResults.length < $scope.settings.successResults) {
      $scope.topResults.push({
        links: links,
        fullLinks: fullLinks,
        cost: cost
      });
    } else if ($scope.topResults[$scope.settings.successResults - 1].cost > cost) {
      $scope.topResults[$scope.settings.successResults - 1] = {
        links: links,
        fullLinks: fullLinks,
        cost: cost
      };
    }
    return $scope.topResults = _.sortBy(_.uniqBy($scope.topResults, 'cost'), 'cost');
  };
  drawGraph = function(targets, links) {
    var maxX, maxY, s;
    $('#graph').remove();
    $('#graph-container').html('<div id="graph" style="height:400px"></div>');
    s = new sigma('graph');
    maxX = _.max(_.map(targets, 'x'));
    if (maxX < $scope.source.x) {
      maxX = $scope.source.x;
    }
    maxY = _.max(_.map(targets, 'y'));
    if (maxY < $scope.source.y) {
      maxY = $scope.source.y;
    }
    _.each(targets, function(target) {
      return s.graph.addNode({
        id: "n" + target.id,
        label: target.label,
        x: target.x,
        y: maxY - target.y,
        size: 3
      });
    });
    s.graph.addNode({
      id: "n" + targets.length,
      label: $scope.source.label,
      x: $scope.source.x,
      y: maxY - $scope.source.y,
      size: 5,
      color: 'yellow'
    });
    _.each(links, function(link, i) {
      return s.graph.addEdge({
        id: "e" + i,
        source: "n" + link.from,
        target: "n" + link.to
      });
    });
    return s.refresh();
  };
  $scope.generateResults = function() {
    var helper;
    $scope.topResults = [];
    $scope.visibleResult = null;
    helper = function(treeV, targets, links, fullLinks) {
      var target, targetLinks;
      target = _.find(targets, {
        id: treeV
      });
      target.ip = target.sph / 10 / Math.sqrt(3);
      target.visited = true;
      targetLinks = _.filter(links, function(link) {
        return link.from !== targets.length && (link.from === treeV || link.to === treeV) && !link.visited;
      });
      _.each(targetLinks, function(link) {
        var newTreeV, r, targetR;
        link.visited = true;
        newTreeV = link.from === treeV ? link.to : link.from;
        r = helper(newTreeV, targets, links, fullLinks);
        targetR = _.find(targets, {
          id: r
        });
        target.ip += targetR.ip;
        return fullLinks.push({
          linkName: target.label + " - " + targetR.label,
          consumer: targetR,
          linkLength: target.linksLength[targetR.id],
          ip: targetR.ip,
          j: Transformators.getJ(targetR.u, target.time)
        });
      });
      return treeV;
    };
    return _.each(_.range($scope.settings.loops), function(i) {
      var cTotal, fullLinks, iTotal, isAllVisited, kBuildTotal, kTotal, links, source, sourceLinks, targets, treeV, wConsumerTotal, wDiffTotal, wTotal, zTotal;
      targets = _.cloneDeep($scope.targets);
      source = _.cloneDeep($scope.source);
      isAllVisited = false;
      while (!isAllVisited) {
        fullLinks = [];
        links = linkTargets(targets);
        _.each(targets, function(target) {
          return target.visited = false;
        });
        sourceLinks = _.filter(links, function(link) {
          return link.from === targets.length;
        });
        treeV = _.map(sourceLinks, function(link) {
          return link.to;
        });
        _.each(treeV, function(a) {
          var target;
          target = _.find(targets, {
            id: a
          });
          target.ip = target.sph / 10 / Math.sqrt(3);
          target.visited = true;
          helper(a, targets, links, fullLinks);
          return fullLinks.push({
            linkName: "ИП - " + target.label,
            linkLength: source.linksLength[target.id],
            ip: target.ip,
            j: Transformators.getJ(target.u, target.time),
            consumer: target
          });
        });
        isAllVisited = _.every(targets, {
          visited: true
        });
      }
      _.each(fullLinks, function(link) {
        var lineCost;
        link.f = link.ip / link.j;
        link.line = Transformators.getLine(link.f, link.ip);
        lineCost = Transformators.getLineCost(link.line);
        link.kud = lineCost.price * link.line.count;
        link.k = link.kud * link.linkLength;
        link.kudBuild = 0;
        if ($scope.settings.includeBuildCost) {
          link.kudBuild = Transformators.getLineBuildCost(link.line).price * link.line.count;
          link.kBuild = link.kudBuild * link.linkLength;
        }
        link.p = 6.3;
        link.i = link.p / 100 * link.k;
        link.resistance = Transformators.getLineResistance(link.line);
        link.totalResistance = link.resistance.resistance * link.linkLength / link.line.count;
        link.kf = _.random(1.1, 1.2, true);
        link.cpI = link.ip / link.consumer.km;
        return link.wDiff = link.totalResistance * Math.pow(link.cpI, 2) * Math.pow(link.kf, 2);
      });
      kTotal = _.sumBy(fullLinks, 'k');
      if ($scope.settings.includeBuildCost) {
        kBuildTotal = _.sumBy(fullLinks, 'kBuild');
      }
      iTotal = _.sumBy(fullLinks, 'i');
      wDiffTotal = _.sumBy(fullLinks, 'wDiff');
      wConsumerTotal = _.sumBy(_.map(fullLinks, 'consumer'), 'w');
      wTotal = 100 * wDiffTotal / wConsumerTotal;
      cTotal = 1.9 * wTotal;
      zTotal = $scope.settings.includeBuildCost ? 0.2 * (kTotal + kBuildTotal) + iTotal : 0.2 * kTotal + iTotal;
      fullLinks.push({
        linkLength: _.sumBy(fullLinks, 'linkLength'),
        k: kTotal,
        kBuild: kBuildTotal,
        i: iTotal,
        wDiff: wDiffTotal,
        w: wTotal,
        c: cTotal,
        z: zTotal
      });
      return saveResult(links, fullLinks, zTotal);
    });
  };
  return $scope.showResult = function(result) {
    $scope.visibleResult = result;
    return drawGraph($scope.targets, result.links);
  };
};

angular.module('transformators').controller('LinkMatrixController', LinkMatrixController);

angular.module('transformators').factory('Schemas', function() {
  var getSchemas, schemas, setSchemas;
  schemas = [];
  getSchemas = function() {
    return schemas;
  };
  setSchemas = function(_schemas) {
    return schemas = _schemas;
  };
  return {
    getSchemas: getSchemas,
    setSchemas: setSchemas
  };
}).factory('Graph', function() {
  var _isCyclicUtil, addLink, getGraph, graph, initGraph, isCyclic;
  graph = {
    v: null,
    links: [],
    adg: []
  };
  getGraph = function() {
    return graph;
  };
  initGraph = function(v) {
    var adg, i, j, len, ref;
    adg = [];
    ref = _.range(v);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      adg.push([]);
    }
    return _.extend(graph, {
      v: v,
      links: [],
      adg: adg
    });
  };
  addLink = function(v, w) {
    graph.links.push({
      from: v,
      to: w
    });
    graph.adg[v].push(w);
    return graph.adg[w].push(v);
  };
  _isCyclicUtil = function(v, visited, parent) {
    var i, j, len, ref;
    visited[v] = true;
    ref = graph.adg[v];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (!visited[i]) {
        if (_isCyclicUtil(i, visited, v)) {
          return true;
        }
      } else if (i !== parent) {
        return true;
      }
    }
    return false;
  };
  isCyclic = function() {
    var i, j, k, len, len1, ref, ref1, u, visited;
    visited = [];
    ref = _.range(graph.v);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      visited[i] = false;
    }
    ref1 = _.range(graph.v);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      u = ref1[k];
      if (!visited[u]) {
        if (_isCyclicUtil(u, visited, -1)) {
          return true;
        }
      }
    }
    return false;
  };
  return {
    getGraph: getGraph,
    initGraph: initGraph,
    addLink: addLink,
    isCyclic: isCyclic
  };
});
